ffk:
  global:
    fullnameOverride: dev-ffk
  defaultPodOptions:
    automountServiceAccountToken: false
    labels:
      application: ghost
    securityContext:
      fsGroup: 1001
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/instance
              operator: In
              values:
              - dev-ffk-db
          topologyKey: kubernetes.io/hostname
  controllers:
    main:
      annotations:
        secrets.infisical.com/auto-reload: "true"
      containers:
        main:
          nameOverride: ghost
          type: deployment
          annotations:
            reloader.stakater.com/auto: "true"
          image:
            repository: bitnami/ghost
            tag: "5.73.2"
            pullPolicy: IfNotPresent
          env:
            TZ: "America/New_York"
            NODE_ENV: "production"
            GHOST_SKIP_BOOTSTRAP: "true"
            BITNAMI_DEBUG: "true"
            LOG_LEVEL: "info"
            logging__useLocalTime: "true"
            logging__transports: '["stdout"]'
            GHOST_ENABLE_HTTPS: "yes"
            GHOST_BLOG_TITLE:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: ghost__blog__title
            GHOST_USER:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: ghost_user
            GHOST_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: ghost_password
            GHOST_HOST:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: url
            GHOST_SMTP_SERVICE:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__service
            GHOST_SMTP_HOST:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__host
            GHOST_SMTP_PROTOCOL: "tls"
            GHOST_PORT_NUMBER: "2368"
            GHOST_SMTP_USER:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__auth__user
            GHOST_SMTP_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__auth__pass
            GHOST_SMTP_PORT_NUMBER:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__port
            database__client: mysql
            GHOST_DATABASE_HOST: dev-ffk-db
            GHOST_DATABASE_PORT_NUMBER: 3306
            GHOST_DATABASE_USER:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-user
            GHOST_DATABASE_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-password
            GHOST_DATABASE_NAME:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-database
            GHOST_EMAIL:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: ghost_user
          probes:
            liveness:
              enabled: true
            readiness:
              enabled: true
            startup:
              enabled: true
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 250m
              memory: 512Mi

  service:
    main:
      nameOverride: ghost
      annotations:
        traefik.ingress.kubernetes.io/service.serversscheme: http
        traefik.ingress.kubernetes.io/service.passhostheader: "true" 
      extraSelectorLabels:
        application: ghost
      ports:
        http:
          enabled: true
          port: 2368
          primary: true
          protocol: HTTP


  ingress:
    main:
      nameOverride: ghost
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: le-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-security-headers@kubernetescrd
        traefik.ingress.kubernetes.io/router.tls.options: traefik-tls13@kubernetescrd
        traefik.ingress.kubernetes.io/router.pathmatcher: PathPrefix
        traefik.ingress.kubernetes.io/router.tls: "true"
      hosts:
        - host: devffk.xtr.pub
          paths:
            - path: /
              pathType: ImplementationSpecific
              service:
                name: main
                port: http
      tls:
      - hosts:
        - devffk.xtr.pub
        secretName: tls-secret

  persistence:
    config:
      enabled: false
    ghost-data:
      enabled: true
      type: persistentVolumeClaim
      storageClass: ceph-block-gold
      accessMode: ReadWriteOnce
      size: "3Gi"
      globalMounts:
        - path: /bitnami/ghost

  networkpolicies:
    main:
      enabled: true
      controller: main
      podSelector:
        matchLabels:
          application: ghost
      policyTypes:
        - Ingress
        - Egress
      rules:
        ingress:
          - from:
              - podSelector:
                  matchLabels:
                    application: database
          - from:
              - namespaceSelector:
                  matchLabels:
                    name: traefik
                podSelector:
                  matchLabels:
                     app.kubernetes.io/name: traefik
        egress:
          - to:
              - namespaceSelector: {}
                podSelector:
                  matchLabels:
                    k8s-app: kube-dns
            ports:
              - port: 53
                protocol: UDP
          - to:
              - podSelector:
                  matchLabels:
                    application: database

devffk-db:
  global:
    fullnameOverride: dev-ffk-db
  defaultPodOptions:
    automountServiceAccountToken: false
    labels:
      application: database
    securityContext:
      fsGroup: 999
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/instance
              operator: In
              values:
              - dev-ffk
          topologyKey: kubernetes.io/hostname

  controllers:
    main:
      annotations:
        secrets.infisical.com/auto-reload: "true"
      type: statefulset
      strategy: OnDelete
      containers:
        main:
          nameOverride: db
          image:
            repository: mysql
            tag: "8.0.35-debian"
            pullPolicy: IfNotPresent
          env:
            TZ: "America/New_York"
            MYSQL_ROOT_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-root-password
            MYSQL_DATABASE:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-database
            MYSQL_USER:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-user
            MYSQL_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-password
            MYSQL_MYSQL_LOCALHOST_USER:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-localhost-user
          probes:
            startup:
              enabled: false
            liveness:
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                  - /bin/bash
                  - -ec
                  - |
                    password_aux="${MYSQL_ROOT_PASSWORD:-}"
                    mysqladmin status -uroot -p"${password_aux}"
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
            readiness:
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                  - /bin/bash
                  - -ec
                  - |
                    password_aux="${MYSQL_ROOT_PASSWORD:-}"
                    mysqladmin status -uroot -p"${password_aux}"
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
  persistence:
    config:
      enabled: false
    data:
      enabled: true
      type: persistentVolumeClaim
      storageClass: ceph-block-gold
      accessMode: ReadWriteOnce
      size: "2Gi"
      globalMounts:
        - path: /var/lib/mysql
        
  service:
    main:
      enabled: false
    db:
      enabled: true
      controller: main
      primary: true
      extraSelectorLabels:
        application: database
      ports:
        db:
          enabled: true
          port: 3306

  ingress:
    main:
      enabled: false

  networkpolicies:
    main:
      enabled: true
      controller: main
      podSelector:
        matchLabels:
          application: database
      policyTypes:
        - Ingress
        - Egress
      rules:
        ingress:
          - from:
              - podSelector:
                  matchLabels:
                    application: ghost
        egress:
          - to:
              - namespaceSelector: {}
                podSelector:
                  matchLabels:
                    k8s-app: kube-dns
            ports:
              - port: 53
                protocol: UDP
          - to:
              - podSelector:
                  matchLabels:
                    application: ghost

backupTargets:
  &target backblaze-palebluedot:
    type: ObjectStore
    vendor: Other
    objectStoreCredentials:
      url: https://s3.us-west-000.backblazeb2.com
      bucketName: palebluedot-tvk
      region: us-west-000
      credentialSecret:
        name: *target
    thresholdCapacity: 10Gi

backupPlan:
  dev-ffk:
    backupTarget: *target
    backupPlanFlags:
      skipImageBackup: true
    policies:
      retention-policy:
        type: Retention
        spec:
          cleanupConfig:
            backupDays: 2
          default: false
          retentionConfig:
            dayOfWeek: Sunday
            weekly: 1
            latest: 2
      fullbackup-policy:
        type: Schedule
        spec:
          default: false
          scheduleConfig:
            schedule:
            - 10 4 * 1/3 *
      incremental-policy:
        type: Schedule
        spec:
          default: false
          scheduleConfig:
            schedule:
            - 15 4 * * *
    excludeResources:
      labelSelector:
      - matchExpressions:
        - key: tvk-skip-object
          operator: In
          values:
          - "true"
    backupHook: mysql
    hookConfig:
      mode: Sequential
      hooks:
        - hook:
            name: mysql-hook
          podSelector:
            labels:
              - matchLabels:
                  application: database

infisicalSecret:
  ffk-db:
    syncInterval: 0
  ghost-config-vars:
    syncInterval: 0
  &target backblaze-palebluedot:
    syncInterval: 900
    secretsPath: global