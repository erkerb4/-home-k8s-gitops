ffk:
  global:
    fullnameOverride: ffk
  defaultPodOptions:
    automountServiceAccountToken: false
    dnsConfig:
      options:
        - name: ndots
          value: "2"
    securityContext:
      runAsUser: 999
      fsGroup: 999
      fsGroupChangePolicy: "OnRootMismatch"
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/instance
              operator: In
              values:
              - ffk-db
          topologyKey: kubernetes.io/hostname
  controllers:
    ghost:
      type: deployment
      annotations:
        secrets.infisical.com/auto-reload: "true"
      containers:
        main:
          image:
            repository: bitnami/ghost
            tag: "5.82.1"
            pullPolicy: IfNotPresent
          env:
            TZ: "America/New_York"
            NODE_ENV: "production"
            GHOST_SKIP_BOOTSTRAP: "true"
            BITNAMI_DEBUG: "true"
            LOG_LEVEL: "info"
            logging__useLocalTime: "true"
            logging__transports: '["stdout"]'
            GHOST_ENABLE_HTTPS: "yes"
            GHOST_BLOG_TITLE:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: ghost__blog__title
            GHOST_USER:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: ghost_user
            GHOST_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: ghost_password
            url:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: full_url
            GHOST_HOST:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: url
            GHOST_SMTP_SERVICE:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__service
            GHOST_SMTP_HOST:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__host
            GHOST_SMTP_PROTOCOL: "tls"
            GHOST_PORT_NUMBER: "2368"
            GHOST_SMTP_USER:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__auth__user
            GHOST_SMTP_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__auth__pass
            GHOST_SMTP_PORT_NUMBER:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: mail__options__port
            database__client: mysql
            GHOST_DATABASE_HOST: ffk-db
            GHOST_DATABASE_PORT_NUMBER: 3306
            GHOST_DATABASE_USER:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-user
            GHOST_DATABASE_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-password
            GHOST_DATABASE_NAME:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-database
            GHOST_EMAIL:
              valueFrom:
                secretKeyRef:
                  name: ghost-config-vars
                  key: ghost_user
          probes:
            liveness:
              enabled: true
            readiness:
              enabled: true
            startup:
              enabled: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          resources:
            limits:
              cpu: "2"
              memory: 2Gi
            requests:
              cpu: 250m
              memory: 512Mi
  service:
    app:
      controller: ghost
      annotations:
        traefik.ingress.kubernetes.io/service.serversscheme: http
        traefik.ingress.kubernetes.io/service.passhostheader: "true"
      ports:
        http:
          enabled: true
          port: 2368
          primary: true
          protocol: HTTP
  ingress:
    main:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: le-prod
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.pathmatcher: PathPrefix
      hosts:
        - host: prdffk.xtr.pub
          paths:
            - path: /
              pathType: ImplementationSpecific
              service:
                identifier: app
                port: http
      tls:
      - hosts:
        - prdffk.xtr.pub
        secretName: tls-secret
  persistence:
    config:
      enabled: true
      type: persistentVolumeClaim
      storageClass: ec-silver
      accessMode: ReadWriteOnce
      size: "3Gi"
      globalMounts:
        - path: /bitnami/ghost

  networkpolicies:
    main:
      enabled: true
      controller: ghost
      policyTypes:
        - Ingress
        - Egress
      rules:
        ingress:
          - from:
              - podSelector:
                  matchLabels:
                    application: database
          - from:
              - namespaceSelector:
                  matchLabels:
                    name: traefik
                podSelector:
                  matchLabels:
                     app.kubernetes.io/name: traefik
        egress:
          - to:
              - namespaceSelector: {}
                podSelector:
                  matchLabels:
                    k8s-app: kube-dns
            ports:
              - port: 53
                protocol: UDP
          - to:
              - podSelector:
                  matchLabels:
                    application: database

ffk-db:
  global:
    fullnameOverride: ffk-db
  defaultPodOptions:
    automountServiceAccountToken: false
    dnsConfig:
      options:
        - name: ndots
          value: "2"
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
      fsGroup: 999
      fsGroupChangePolicy: "OnRootMismatch"
      seccompProfile:
        type: RuntimeDefault
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/instance
              operator: In
              values:
              - ffk
          topologyKey: kubernetes.io/hostname

  controllers:
    db:
      annotations:
        secrets.infisical.com/auto-reload: "true"
      type: statefulset
      strategy: OnDelete
      containers:
        main:
          image:
            repository: mysql
            tag: "8.0.36-debian"
            pullPolicy: IfNotPresent
          env:
            TZ: "America/New_York"
            MYSQL_ROOT_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-root-password
            MYSQL_DATABASE:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-database
            MYSQL_USER:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-user
            MYSQL_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-password
            MYSQL_MYSQL_LOCALHOST_USER:
              valueFrom:
                secretKeyRef:
                  name: ffk-db
                  key: mysql-localhost-user
          probes:
            startup:
              enabled: false
            liveness:
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                  - /bin/bash
                  - -ec
                  - |
                    password_aux="${MYSQL_ROOT_PASSWORD:-}"
                    mysqladmin status -uroot -p"${password_aux}"
                failureThreshold: 3
                initialDelaySeconds: 120
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
            readiness:
              enabled: true
              custom: true
              spec:
                exec:
                  command:
                  - /bin/bash
                  - -ec
                  - |
                    password_aux="${MYSQL_ROOT_PASSWORD:-}"
                    mysqladmin status -uroot -p"${password_aux}"
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          resources:
            limits:
              cpu: 1000m
              memory: 512Mi
            requests:
              cpu: 125m
              memory: 256Mi
  persistence:
    config:
      enabled: true
      type: persistentVolumeClaim
      storageClass: ceph-block-gold
      accessMode: ReadWriteOnce
      size: "2Gi"
      globalMounts:
        - path: /var/lib/mysql
  service:
    db:
      enabled: true
      controller: db
      ports:
        db:
          enabled: true
          port: 3306
  ingress: {}
  networkpolicies:
    main:
      enabled: true
      controller: db
      policyTypes:
        - Ingress
        - Egress
      rules:
        ingress:
          - from:
              - podSelector:
                  matchLabels:
                    application: ghost
          # - from:
          #     - podSelector:
          #         matchLabels:
          #           app.kubernetes.io/name: k8s-triliovault
        egress:
          - to:
              - namespaceSelector: {}
                podSelector:
                  matchLabels:
                    k8s-app: kube-dns
            ports:
              - port: 53
                protocol: UDP
          - to:
              - podSelector:
                  matchLabels:
                    application: ghost

# backupTargets:
#   &target backblaze-palebluedot:
#     type: ObjectStore
#     vendor: Other
#     objectStoreCredentials:
#       url: https://s3.us-west-000.backblazeb2.com
#       bucketName: palebluedot-tvk
#       region: us-west-000
#       credentialSecret:
#         name: *target
#     thresholdCapacity: 25Gi

# backupPlan:
#   ffk:
#     backupTarget: *target
#     backupPlanFlags:
#       skipImageBackup: true
#     policies:
#       retention-policy:
#         type: Retention
#         spec:
#           cleanupConfig:
#             backupDays: 2
#           default: false
#           retentionConfig:
#             dayOfWeek: Sunday
#             weekly: 1
#             latest: 12
#       fullbackup-policy:
#         type: Schedule
#         spec:
#           default: false
#           scheduleConfig:
#             schedule:
#             - 10 4 * 1/3 *
#       incremental-policy:
#         type: Schedule
#         spec:
#           default: false
#           scheduleConfig:
#             schedule:
#             - 15 4 * * *
#     excludeResources:
#       labelSelector:
#       - matchExpressions:
#         - key: tvk-skip-object
#           operator: In
#           values:
#           - "true"
#     backupHook: mysql
#     hookConfig:
#       mode: Sequential
#       hooks:
#         - hook:
#             name: mysql-hook
#           podSelector:
#             labels:
#               - matchLabels:
#                   application: database
#           # containerRegex: ffk-db-*

infisicalSecret:
  ffk-db:
    syncInterval: 0
  ghost-config-vars:
    syncInterval: 900
  # *target:
  #   syncInterval: 900
  #   secretsPath: global