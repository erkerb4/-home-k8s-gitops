prometheus:
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false
  nodeExporter:
    enabled: true
    hostNetwork: true
    hostPID: true
    hostRootfs: true
    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: NoSchedule
    resources:
      limits:
        cpu: 75m
        memory: 50Mi
      requests:
        cpu: 25m
        memory: 30Mi
  server:
    baseURL: "http://prom.xtr.pub"
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 1m
    ingress:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/protocol: http
        cert-manager.io/cluster-issuer: le-prod
      hosts:
        - prom.xtr.pub
      tls:
        - hosts:
          - prom.xtr.pub
          secretName: tls-secret 
    persistentVolume:
      size: 15Gi
    statefulSet:
      enabled: true
      headless:
        gRPC:
          enabled: true
    resources:
      limits:
        cpu: 250m
        memory: 3Gi
      requests:
        cpu: 64m
        memory: 512Mi
    service:
      gRPC:
        enabled: true
  networkPolicy:
    enabled: true
  # serverFiles:
  #   prometheus.yml:
  #     scrape_configs:
  #     - job_name: prometheus
  #       metrics_path: /prometheus/metrics
  #       static_configs:
  #       - targets:
  #         - "localhost:9090"
  #     - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  #       job_name: kubernetes-apiservers
  #       kubernetes_sd_configs:
  #       - role: endpoints
  #       relabel_configs:
  #       - action: keep
  #         regex: default;kubernetes;https
  #         source_labels:
  #         - __meta_kubernetes_namespace
  #         - __meta_kubernetes_service_name
  #         - __meta_kubernetes_endpoint_port_name
  #       scheme: https
  #       tls_config:
  #         ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  #         insecure_skip_verify: true
  #     - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  #       job_name: kubernetes-nodes
  #       kubernetes_sd_configs:
  #       - role: node
  #       relabel_configs:
  #       - action: labelmap
  #         regex: __meta_kubernetes_node_label_(.+)
  #       - replacement: kubernetes.default.svc:443
  #         target_label: __address__
  #       - regex: (.+)
  #         replacement: /api/v1/nodes/$1/proxy/metrics
  #         source_labels:
  #         - __meta_kubernetes_node_name
  #         target_label: __metrics_path__
  #       scheme: https
  #       tls_config:
  #         ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  #         insecure_skip_verify: true
  #     - job_name: kubernetes-service-endpoints
  #       kubernetes_sd_configs:
  #       - role: endpoints
  #       relabel_configs:
  #       - action: keep
  #         regex: true
  #         source_labels:
  #         - __meta_kubernetes_service_annotation_prometheus_io_scrape
  #       - action: replace
  #         regex: (https?)
  #         source_labels:
  #         - __meta_kubernetes_service_annotation_prometheus_io_scheme
  #         target_label: __scheme__
  #       - action: replace
  #         regex: (.+)
  #         source_labels:
  #         - __meta_kubernetes_service_annotation_prometheus_io_path
  #         target_label: __metrics_path__
  #       - action: replace
  #         regex: ([^:]+)(?::\d+)?;(\d+)
  #         replacement: $1:$2
  #         source_labels:
  #         - __address__
  #         - __meta_kubernetes_service_annotation_prometheus_io_port
  #         target_label: __address__
  #       - action: labelmap
  #         regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
  #         replacement: __param_$1
  #       - action: labelmap
  #         regex: __meta_kubernetes_service_label_(.+)
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_namespace
  #         target_label: kubernetes_namespace
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_service_name
  #         target_label: kubernetes_name
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_pod_node_name
  #         target_label: kubernetes_node
  #     - job_name: kubernetes-service-endpoints-slow
  #       kubernetes_sd_configs:
  #       - role: endpoints
  #       relabel_configs:
  #       - action: keep
  #         regex: true
  #         source_labels:
  #         - __meta_kubernetes_service_annotation_prometheus_io_scrape_slow
  #       - action: replace
  #         regex: (https?)
  #         source_labels:
  #         - __meta_kubernetes_service_annotation_prometheus_io_scheme
  #         target_label: __scheme__
  #       - action: replace
  #         regex: (.+)
  #         source_labels:
  #         - __meta_kubernetes_service_annotation_prometheus_io_path
  #         target_label: __metrics_path__
  #       - action: replace
  #         regex: ([^:]+)(?::\d+)?;(\d+)
  #         replacement: $1:$2
  #         source_labels:
  #         - __address__
  #         - __meta_kubernetes_service_annotation_prometheus_io_port
  #         target_label: __address__
  #       - action: labelmap
  #         regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
  #         replacement: __param_$1
  #       - action: labelmap
  #         regex: __meta_kubernetes_service_label_(.+)
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_namespace
  #         target_label: kubernetes_namespace
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_service_name
  #         target_label: kubernetes_name
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_pod_node_name
  #         target_label: kubernetes_node
  #       scrape_interval: 5m
  #       scrape_timeout: 30s
  #     - honor_labels: true
  #       job_name: prometheus-pushgateway
  #       kubernetes_sd_configs:
  #       - role: service
  #       relabel_configs:
  #       - action: keep
  #         regex: pushgateway
  #         source_labels:
  #         - __meta_kubernetes_service_annotation_prometheus_io_probe
  #     - job_name: kubernetes-services
  #       kubernetes_sd_configs:
  #       - role: service
  #       metrics_path: /probe
  #       params:
  #         module:
  #         - http_2xx
  #       relabel_configs:
  #       - action: keep
  #         regex: true
  #         source_labels:
  #         - __meta_kubernetes_service_annotation_prometheus_io_probe
  #       - source_labels:
  #         - __address__
  #         target_label: __param_target
  #       - replacement: blackbox
  #         target_label: __address__
  #       - source_labels:
  #         - __param_target
  #         target_label: instance
  #       - action: labelmap
  #         regex: __meta_kubernetes_service_label_(.+)
  #       - source_labels:
  #         - __meta_kubernetes_namespace
  #         target_label: kubernetes_namespace
  #       - source_labels:
  #         - __meta_kubernetes_service_name
  #         target_label: kubernetes_name
  #     - job_name: kubernetes-pods
  #       kubernetes_sd_configs:
  #       - role: pod
  #       relabel_configs:
  #       - action: keep
  #         regex: true
  #         source_labels:
  #         - __meta_kubernetes_pod_annotation_prometheus_io_scrape
  #       - action: replace
  #         regex: (https?)
  #         source_labels:
  #         - __meta_kubernetes_pod_annotation_prometheus_io_scheme
  #         target_label: __scheme__
  #       - action: replace
  #         regex: (.+)
  #         source_labels:
  #         - __meta_kubernetes_pod_annotation_prometheus_io_path
  #         target_label: __metrics_path__
  #       - action: replace
  #         regex: ([^:]+)(?::\d+)?;(\d+)
  #         replacement: $1:$2
  #         source_labels:
  #         - __address__
  #         - __meta_kubernetes_pod_annotation_prometheus_io_port
  #         target_label: __address__
  #       - action: labelmap
  #         regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
  #         replacement: __param_$1
  #       - action: labelmap
  #         regex: __meta_kubernetes_pod_label_(.+)
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_namespace
  #         target_label: kubernetes_namespace
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_pod_name
  #         target_label: kubernetes_pod_name
  #       - action: drop
  #         regex: Pending|Succeeded|Failed|Completed
  #         source_labels:
  #         - __meta_kubernetes_pod_phase
  #     - job_name: kubernetes-pods-slow
  #       kubernetes_sd_configs:
  #       - role: pod
  #       relabel_configs:
  #       - action: keep
  #         regex: true
  #         source_labels:
  #         - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
  #       - action: replace
  #         regex: (https?)
  #         source_labels:
  #         - __meta_kubernetes_pod_annotation_prometheus_io_scheme
  #         target_label: __scheme__
  #       - action: replace
  #         regex: (.+)
  #         source_labels:
  #         - __meta_kubernetes_pod_annotation_prometheus_io_path
  #         target_label: __metrics_path__
  #       - action: replace
  #         regex: ([^:]+)(?::\d+)?;(\d+)
  #         replacement: $1:$2
  #         source_labels:
  #         - __address__
  #         - __meta_kubernetes_pod_annotation_prometheus_io_port
  #         target_label: __address__
  #       - action: labelmap
  #         regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
  #         replacement: __param_$1
  #       - action: labelmap
  #         regex: __meta_kubernetes_pod_label_(.+)
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_namespace
  #         target_label: kubernetes_namespace
  #       - action: replace
  #         source_labels:
  #         - __meta_kubernetes_pod_name
  #         target_label: kubernetes_pod_name
  #       - action: drop
  #         regex: Pending|Succeeded|Failed|Completed
  #         source_labels:
  #         - __meta_kubernetes_pod_phase
  #       scrape_interval: 5m
  #       scrape_timeout: 30s
  #     - job_name: kubernetes-nodes-cadvisor
  #       scheme: https
  #       tls_config:
  #         ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  #         insecure_skip_verify: true
  #       bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
  #       kubernetes_sd_configs:
  #       - role: node
  #       relabel_configs:
  #       - action: labelmap
  #         regex: __meta_kubernetes_node_label_(.+)
  #       - target_label: __address__
  #         replacement: kubernetes.default.svc:443
  #       - source_labels: [__meta_kubernetes_node_name]
  #         regex: (.+)
  #         target_label: __metrics_path__
  #         replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
  #       metric_relabel_configs:
  #       - source_labels: [__name__]
  #         regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
  #         action: keep
  #       - source_labels: [__name__]
  #         regex: 'container_memory_failures_total' # unneeded large metric
  #         action: drop
prometheus-adapter:
  prometheus:
    url: http://prometheus-server
    port: 80
  resources: 
    requests:
      cpu: 125m
      memory: 256Mi
    limits:
      cpu: 250m
      memory: 384Mi
  rules:
    resource:
      cpu:
        containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, container!=""}[3m])) by (<<.GroupBy>>)
        nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      memory:
        containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>, container!=""}) by (<<.GroupBy>>)
        nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      window: 3m