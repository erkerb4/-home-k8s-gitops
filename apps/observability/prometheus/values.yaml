prometheus:
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false
  nodeExporter:
    enabled: true
    hostNetwork: true
    hostPID: true
    hostRootfs: true
    tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: NoSchedule
    resources:
      limits:
        cpu: 75m
        memory: 50Mi
      requests:
        cpu: 25m
        memory: 30Mi
  server:
    baseURL: "http://prom.xtr.pub"
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 1m
    ingress:
      enabled: true
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.tls: "true"
        ingress.kubernetes.io/protocol: http
        cert-manager.io/cluster-issuer: le-prod
      hosts:
        - prom.xtr.pub
      tls:
        - hosts:
          - prom.xtr.pub
          secretName: tls-secret 
    persistentVolume:
      size: 7Gi
    statefulSet:
      enabled: true
      headless:
        gRPC:
          enabled: true
    resources:
      limits:
        cpu: 250m
        memory: 3Gi
      requests:
        cpu: 100m
        memory: 2Gi
    service:
      gRPC:
        enabled: true
    retention: "3d"
  networkPolicy:
    enabled: true

prometheus-adapter:
  prometheus:
    url: http://prometheus-server
    port: 80
  resources: 
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 5000m
      memory: 1500Mi
  rules:
    default: true
    resource:
      cpu:
        containerQuery: |
          sum by (<<.GroupBy>>) (
            rate(container_cpu_usage_seconds_total{container!="",<<.LabelMatchers>>}[3m])
          )
        nodeQuery: |
          sum  by (<<.GroupBy>>) (
            rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal",<<.LabelMatchers>>}[3m])
          )
        resources:
          overrides:
            node:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      memory:
        containerQuery: |
          sum by (<<.GroupBy>>) (
            avg_over_time(container_memory_working_set_bytes{container!="",<<.LabelMatchers>>}[3m])
          )
        nodeQuery: |
          sum by (<<.GroupBy>>) (
            avg_over_time(node_memory_MemTotal_bytes{<<.LabelMatchers>>}[3m])
            -
            avg_over_time(node_memory_MemAvailable_bytes{<<.LabelMatchers>>}[3m])
          )
        resources:
          overrides:
            node:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
        containerLabel: container
      window: 3m